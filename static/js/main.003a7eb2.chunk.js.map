{"version":3,"sources":["serviceWorker.js","components/FunnelStep/FunnelStep.js","components/ProgressBar/ProgressBar.js","services/backend/getData.js","config/index.js","services/backend/getUserCategories.js","services/backend/postData.js","services/backend/postUser.js","pages/Funnel/Funnel.js","hooks/useUserCategories.js","services/utils/getUrlParameter.js","pages/Confirm/Confirm.js","services/backend/postConfirmation.js","services/backend/getUserSettings.js","pages/Settings/Settings.js","hooks/useSettings.js","pages/Cancel/Cancel.js","index.js"],"names":["Boolean","window","location","hostname","match","FunnelStep","title","children","className","ProgressBar","percent","style","marginLeft","toFixed","width","getData","url","a","Axios","get","response","data","console","log","config","BACKEND_URL","postData","post","dayNames","mealTypes","prices","students","employees","other","Funnel","useState","email","days","semesterBreaks","meals","places","userCategoryId","name","city","userData","setUserData","userCategories","setUserCategories","useEffect","uc","_uc","i","length","id","fetch","useUserCategories","funnelStep","setFunnelStep","nextStep","updateUserData","value","toggleDay","_days","toggleMeals","_meals","nextStepButton","onClick","type","onChange","e","target","map","dayName","key","checked","meal","Object","keys","priceKey","placeholder","marginTop","getUrlParameter","replace","results","RegExp","exec","search","decodeURIComponent","Confirm","uId","code","userId","postConfirmation","getUserSettings","Settings","settings","setSettings","isLoading","setIsLoading","_settings","useSettings","JSON","stringify","Cancel","ReactDOM","render","StrictMode","path","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.003a7eb2.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\n\nimport \"./FunnelStep.css\";\n\nexport default function FunnelStep({ title, children }) {\n  return (\n    <div>\n      <h1 className=\"sf-funnel-step-title\">{title}</h1>\n      {children}\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport \"./ProgressBar.css\";\n\nexport default function ProgressBar({ percent = 0 }) {\n  return (\n    <div className=\"sf-progress-bar-wrapper\">\n      <label\n        className=\"sf-progress-bar-label\"\n        style={{ marginLeft: percent / 2 + \"%\" }}\n      >\n        {percent.toFixed(0)} %\n      </label>\n      <div className=\"sf-progress-bar\" style={{ width: percent + \"%\" }}></div>\n    </div>\n  );\n}\n","import Axios from \"axios\";\n\nexport default async function getData(url) {\n  try {\n    const response = await Axios.get(url);\n    return response.data;\n  } catch (err) {\n    console.log(err);\n  }\n}\n","const local = {\n  BACKEND_URL: \"http://localhost:8000\",\n};\n\nconst production = {\n  BACKEND_URL: \"http://api.studierendenfutter.de:8000\",\n};\n\nlet config = local;\n\nif (process.env.NODE_ENV === \"production\") {\n  config = production;\n}\n\nexport default config;\n","import getData from \"./getData\";\nimport config from \"../../config\";\n\nconst url = config.BACKEND_URL + \"/userCategories\";\n\nexport default function getUserCategories() {\n  return getData(url);\n}\n","import Axios from \"axios\";\n\nexport default function postData(url, data) {\n  return Axios.post(url, data);\n}\n","import postData from \"./postData\";\nimport config from \"../../config\";\n\nconst url = config.BACKEND_URL + \"/users\";\n\nexport default function postUser(data) {\n  postData(url, data);\n}\n","import React, { useState } from \"react\";\nimport FunnelStep from \"../../components/FunnelStep/FunnelStep\";\nimport ProgressBar from \"../../components/ProgressBar\";\nimport useUserCategories from \"../../hooks/useUserCategories\";\nimport postUser from \"../../services/backend/postUser\";\n\nconst dayNames = [\n  \"Montag\",\n  \"Dienstag\",\n  \"Mittwoch\",\n  \"Donnerstag\",\n  \"Freitag\",\n  \"Samstag\",\n];\n\nconst mealTypes = [\n  \"Gerichte mit Fleisch\",\n  \"Gerichte mit Fisch\",\n  \"Vegetarische Gerichte\",\n  \"Vegane Gerichte\",\n];\n\nconst prices = {\n  students: \"Preis für Studierende\",\n  employees: \"Preis für Beschäftigte der Universität\",\n  other: \"Preis für Nichtstudierende\",\n};\n\nconst TOTAL_FUNNEL_STEPS = 7;\n\nexport default function Funnel() {\n  const [userData, setUserData] = useState({\n    email: \"\",\n    days: [true, true, true, true, true, true],\n    semesterBreaks: true,\n    meals: [true, true, true, true],\n    places: [true, true, true],\n    userCategoryId: 1,\n    name: \"\",\n    city: \"Münster\",\n  });\n\n  const userCategories = useUserCategories();\n\n  const [funnelStep, setFunnelStep] = useState(0);\n\n  const nextStep = () => {\n    setFunnelStep(funnelStep + 1);\n  };\n\n  const updateUserData = (name, value) => {\n    setUserData({ ...userData, [name]: value });\n  };\n\n  const toggleDay = (i) => {\n    const _days = [...userData.days];\n    _days[i] = !_days[i];\n    updateUserData(\"days\", _days);\n  };\n\n  const toggleMeals = (i) => {\n    const _meals = [...userData.meals];\n    _meals[i] = !_meals[i];\n    updateUserData(\"meals\", _meals);\n  };\n\n  const nextStepButton = <button onClick={nextStep}>Weiter</button>;\n\n  if (!userCategories) {\n    return <div>Hey</div>;\n  }\n  return (\n    <div>\n      {funnelStep === 0 && (\n        <FunnelStep title=\"Hey lass uns loslegen! Wie möchtest du dich anmelden?\">\n          <button onClick={nextStep}>\n            In 7 Fragen schnell zum Individuellen Lunchletter\n          </button>\n          <button\n            onClick={() => {\n              setFunnelStep(99);\n            }}\n          >\n            Direkt anmelden ohne individuelle Einstellungen\n          </button>\n        </FunnelStep>\n      )}\n      {funnelStep === 1 && (\n        <FunnelStep title=\"Alles klar: Verrätst du uns zuerst, an welche Mail-Adresse wir den Lunchletter schicken sollen?\">\n          <input\n            type=\"text\"\n            value={userData.email}\n            onChange={(e) => {\n              updateUserData(\"email\", e.target.value);\n            }}\n          />\n          {nextStepButton}\n        </FunnelStep>\n      )}\n      {funnelStep === 2 && (\n        <FunnelStep\n          title={`Perfekt du bekommst den Lunchletter an ${userData.email}! An welchen Tagen möchtest du den Lunchletter haben?`}\n        >\n          {dayNames.map((dayName, i) => (\n            <div>\n              <input\n                type=\"checkbox\"\n                key={dayName}\n                checked={userData.days[i]}\n                onClick={() => {\n                  toggleDay(i);\n                }}\n              />{\" \"}\n              <label\n                onClick={() => {\n                  toggleDay(i);\n                }}\n              >\n                {dayName}\n              </label>\n            </div>\n          ))}\n          {nextStepButton}\n        </FunnelStep>\n      )}\n      {funnelStep === 3 && (\n        <FunnelStep title=\"Auch in den Semesterferien?\">\n          <button\n            onClick={() => {\n              updateUserData(\"semesterBreaks\", true);\n              nextStep();\n            }}\n          >\n            ja\n          </button>\n          <button\n            onClick={() => {\n              updateUserData(\"semesterBreaks\", false);\n              nextStep();\n            }}\n          >\n            nein\n          </button>\n        </FunnelStep>\n      )}\n      {funnelStep === 4 && (\n        <FunnelStep\n          title={`Ist notiert. Welche Gerichte sollen wir in deinen persönlichen Lunchletter aufnehmen?`}\n        >\n          {mealTypes.map((meal, i) => (\n            <div>\n              <input\n                type=\"checkbox\"\n                key={meal}\n                checked={userData.meals[i]}\n                onClick={() => {\n                  toggleMeals(i);\n                }}\n              />{\" \"}\n              <label\n                onClick={() => {\n                  toggleMeals(i);\n                }}\n              >\n                {meal}\n              </label>\n            </div>\n          ))}\n          {nextStepButton}\n        </FunnelStep>\n      )}\n      {funnelStep === 5 && (\n        <FunnelStep\n          title=\"Super, wir haben es fast geschafft. Jetzt müssen wir nur noch wissen, welchen Preis wir\n        dir für die Mittagsgerichte anzeigen sollen:\"\n        >\n          {Object.keys(prices).map((priceKey) => (\n            <div>\n              <input\n                type=\"radio\"\n                key={priceKey}\n                checked={userCategories[priceKey] === userData.userCategoryId}\n                onClick={() =>\n                  updateUserData(\"userCategoryId\", userCategories[priceKey])\n                }\n              />\n              <label\n                onClick={() =>\n                  updateUserData(\"userCategoryId\", userCategories[priceKey])\n                }\n              >\n                {prices[priceKey]}\n              </label>\n            </div>\n          ))}\n          {nextStepButton}\n        </FunnelStep>\n      )}\n      {funnelStep === 6 && (\n        <FunnelStep\n          title=\"Fertig, wir haben deinen Lunchletter konfiguriert. Sehr gerne würden wir dich auch mit\n        Namen ansprechen:\"\n        >\n          <input\n            type=\"text\"\n            placeholder=\"Wie heißt du?\"\n            onChange={(e) => updateUserData(\"name\", e.target.value)}\n          />\n          <label>\n            Wir verwenden deinen Namen ausschließlich für die Personalisierung\n            deiner Mails.\n          </label>\n          <button\n            onClick={() => {\n              postUser(userData);\n              nextStep();\n            }}\n          >\n            Weiter\n          </button>\n        </FunnelStep>\n      )}\n      {funnelStep === 7 && (\n        <FunnelStep\n          title={`Cool ${userData.name}! Wir haben dir gerade eine Bestätigungsmail gesendet. Bitte bestätige den\n        Link um ab sofort den Lunchletter zu erhalten.`}\n        />\n      )}\n      {funnelStep === 99 && (\n        <FunnelStep title=\"Flott zu deinem Lunchletter: Dann benötigen wir nur noch deine Mailadresse:\">\n          <input type=\"text\"></input>\n        </FunnelStep>\n      )}\n      <div style={{ marginTop: \"10px\" }}>\n        <ProgressBar\n          percent={((funnelStep + 1) * 100) / (TOTAL_FUNNEL_STEPS + 1)}\n        />\n      </div>\n    </div>\n  );\n}\n","import getUserCategories from \"../services/backend/getUserCategories\";\nimport { useState, useEffect } from \"react\";\n\nexport default function useUserCategories() {\n  const [userCategories, setUserCategories] = useState({});\n\n  useEffect(() => {\n    const fetch = async () => {\n      const uc = await getUserCategories();\n      const _uc = {};\n      for (let i = 0; i < uc.length; i++) {\n        _uc[uc[i].name] = uc[i].id;\n      }\n      setUserCategories(_uc);\n    };\n\n    fetch();\n  }, []); // eslint-disable-line\n\n  return userCategories;\n}\n","export default function getUrlParameter(name) {\n  name = name.replace(/[[]/, \"\\\\[\").replace(/[\\]]/, \"\\\\]\");\n  let regex = new RegExp(\"[\\\\?&]\" + name + \"=([^&#]*)\");\n  let results = regex.exec(window.location.search);\n  return results === null\n    ? \"\"\n    : decodeURIComponent(results[1].replace(/\\+/g, \" \"));\n}\n","import React, { useEffect } from \"react\";\nimport postConfirmation from \"../../services/backend/postConfirmation\";\nimport getUrlParameter from \"../../services/utils/getUrlParameter\";\n\nexport default function Confirm() {\n  const uId = getUrlParameter(\"uId\");\n  const code = getUrlParameter(\"code\");\n  useEffect(() => {\n    postConfirmation(uId, code);\n  });\n\n  return <div>Confirmed</div>;\n}\n","import config from \"../../config\";\nimport postData from \"./postData\";\n\nexport default function postConfirmation(userId, code) {\n  const url = config.BACKEND_URL + \"/users/\" + userId + \"/confirm\";\n  postData(url, { code });\n}\n","import config from \"../../config\";\nimport getData from \"./getData\";\n\nexport default function getUserSettings({ uId, code }) {\n  const url = config.BACKEND_URL + \"/users/\" + uId + \"/settings?code=\" + code;\n  return getData(url);\n}\n","import React from \"react\";\nimport useSettings from \"../../hooks/useSettings\";\nimport getUrlParameter from \"../../services/utils/getUrlParameter\";\n\nexport default function Settings() {\n  const uId = getUrlParameter(\"uId\");\n  const code = getUrlParameter(\"code\");\n  const [settings, , isLoadingSettings] = useSettings(uId, code);\n\n  if (isLoadingSettings) {\n    return <div>Loading...</div>;\n  }\n\n  return <div>{JSON.stringify(settings)}</div>;\n}\n","import { useState, useEffect } from \"react\";\nimport getUserSettings from \"../services/backend/getUserSettings\";\n\nexport default function useSettings(uId, code) {\n  const [settings, setSettings] = useState({});\n\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    async function fetch() {\n      const _settings = await getUserSettings({ uId, code });\n      setSettings(_settings);\n      setIsLoading(false);\n    }\n    fetch();\n  }, []); // eslint-disable-line\n\n  return [settings, setSettings, isLoading];\n}\n","import React, { useEffect } from \"react\";\nimport getUrlParameter from \"../../services/utils/getUrlParameter\";\n\nexport default function Cancel() {\n  //const uId = getUrlParameter(\"uId\");\n  //const code = getUrlParameter(\"code\");\n\n  useEffect(() => {\n    console.log(\"Cancel here!\");\n  });\n\n  return <div>Canceled</div>;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Funnel from \"./pages/Funnel/Funnel\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Confirm from \"./pages/Confirm\";\nimport Settings from \"./pages/Settings\";\nimport Cancel from \"./pages/Cancel\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <Switch>\n        <Route path=\"/confirm\">\n          <Confirm />\n        </Route>\n        <Route path=\"/cancel\">\n          <Cancel />\n        </Route>\n        <Route path=\"/settings\">\n          <Settings />\n        </Route>\n        <Route path=\"/funnel\">\n          <Funnel />\n        </Route>\n      </Switch>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
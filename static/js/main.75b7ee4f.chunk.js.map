{"version":3,"sources":["serviceWorker.js","components/FunnelStep/FunnelStep.js","pages/Funnel/Funnel.js","index.js"],"names":["Boolean","window","location","hostname","match","FunnelStep","title","children","dayNames","mealTypes","prices","students","employees","other","Funnel","useState","email","days","semesterBreak","meals","places","userGroup","name","userData","setUserData","funnelStep","setFunnelStep","nextStep","updateUserData","value","toggleDay","i","_days","toggleMeals","_meals","nextStepButton","onClick","type","onChange","e","target","map","dayName","key","checked","meal","Object","keys","priceKey","placeholder","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.75b7ee4f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\n\nexport default function FunnelStep({ title, children }) {\n  return (\n    <div>\n      <h1>{title}</h1>\n      {children}\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport FunnelStep from \"../../components/FunnelStep/FunnelStep\";\n\nconst dayNames = [\n  \"Montag\",\n  \"Dienstag\",\n  \"Mittwoch\",\n  \"Donnerstag\",\n  \"Freitag\",\n  \"Samstag\",\n];\n\nconst mealTypes = [\n  \"Gerichte mit Fleisch\",\n  \"Gerichte mit Fisch\",\n  \"Vegetarische Gerichte\",\n  \"Vegane Gerichte\",\n];\n\nconst prices = {\n  students: \"Preis für Studierende\",\n  employees: \"Preis für Beschäftigte der Universität\",\n  other: \"Preis für Nichtstudierende\",\n};\n\nexport default function Funnel() {\n  const [userData, setUserData] = useState({\n    email: \"\",\n    days: [true, true, true, true, true, true],\n    semesterBreak: true,\n    meals: [true, true, true, true],\n    places: [true, true, true],\n    userGroup: \"students\",\n    name: \"\",\n  });\n\n  const [funnelStep, setFunnelStep] = useState(0);\n\n  const nextStep = () => {\n    setFunnelStep(funnelStep + 1);\n  };\n\n  const lastStep = () => {\n    setFunnelStep(funnelStep + 2);\n  };\n\n  const updateUserData = (name, value) => {\n    setUserData({ ...userData, [name]: value });\n  };\n\n  const toggleDay = (i) => {\n    const _days = [...userData.days];\n    _days[i] = !_days[i];\n    updateUserData(\"days\", _days);\n  };\n\n  const toggleMeals = (i) => {\n    const _meals = [...userData.meals];\n    _meals[i] = !_meals[i];\n    updateUserData(\"meals\", _meals);\n  };\n\n  const nextStepButton = <button onClick={nextStep}>Weiter</button>;\n\n  return (\n    <div>\n      {funnelStep === 0 && (\n        <FunnelStep title=\"Hey lass uns loslegen! Wie möchtest du dich anmelden?\">\n          <button onClick={nextStep}>\n            In 7 Fragen schnell zum Individuellen Lunchletter\n          </button>\n          <button\n            onClick={() => {\n              setFunnelStep(99);\n            }}\n          >\n            Direkt anmelden ohne individuelle Einstellungen\n          </button>\n        </FunnelStep>\n      )}\n      {funnelStep === 1 && (\n        <FunnelStep title=\"Alles klar: Verrätst du uns zuerst, an welche Mail-Adresse wir den Lunchletter schicken sollen?\">\n          <input\n            type=\"text\"\n            value={userData.email}\n            onChange={(e) => {\n              updateUserData(\"email\", e.target.value);\n            }}\n          />\n          {nextStepButton}\n        </FunnelStep>\n      )}\n      {funnelStep === 2 && (\n        <FunnelStep\n          title={`Perfekt du bekommst den Lunchletter an ${userData.email}! An welchen Tagen möchtest du den Lunchletter haben?`}\n        >\n          {dayNames.map((dayName, i) => (\n            <div>\n              <input\n                type=\"checkbox\"\n                key={dayName}\n                checked={userData.days[i]}\n                onClick={() => {\n                  toggleDay(i);\n                }}\n              />{\" \"}\n              <label\n                onClick={() => {\n                  toggleDay(i);\n                }}\n              >\n                {dayName}\n              </label>\n            </div>\n          ))}\n          {nextStepButton}\n        </FunnelStep>\n      )}\n      {funnelStep === 3 && (\n        <FunnelStep title=\"Auch in den Semesterferien?\">\n          <button\n            onClick={() => {\n              updateUserData(\"semesterBreak\", true);\n              nextStep();\n            }}\n          >\n            ja\n          </button>\n          <button\n            onClick={() => {\n              updateUserData(\"semesterBreak\", false);\n              nextStep();\n            }}\n          >\n            nein\n          </button>\n        </FunnelStep>\n      )}\n      {funnelStep === 4 && (\n        <FunnelStep\n          title={`Ist notiert. Welche Gerichte sollen wir in deinen persönlichen Lunchletter aufnehmen?`}\n        >\n          {mealTypes.map((meal, i) => (\n            <div>\n              <input\n                type=\"checkbox\"\n                key={meal}\n                checked={userData.meals[i]}\n                onClick={() => {\n                  toggleMeals(i);\n                }}\n              />{\" \"}\n              <label\n                onClick={() => {\n                  toggleMeals(i);\n                }}\n              >\n                {meal}\n              </label>\n            </div>\n          ))}\n          {nextStepButton}\n        </FunnelStep>\n      )}\n      {funnelStep === 5 && (\n        <FunnelStep\n          title=\"Super, wir haben es fast geschafft. Jetzt müssen wir nur noch wissen, welchen Preis wir\n        dir für die Mittagsgerichte anzeigen sollen:\"\n        >\n          {Object.keys(prices).map((priceKey) => (\n            <div>\n              <input\n                type=\"radio\"\n                key={priceKey}\n                checked={priceKey === userData.userGroup}\n                onClick={() => updateUserData(\"userGroup\", priceKey)}\n              />\n              <label onClick={() => updateUserData(\"userGroup\", priceKey)}>\n                {prices[priceKey]}\n              </label>\n            </div>\n          ))}\n          {nextStepButton}\n        </FunnelStep>\n      )}\n      {funnelStep === 6 && (\n        <FunnelStep\n          title=\"Fertig, wir haben deinen Lunchletter konfiguriert. Sehr gerne würden wir dich auch mit\n        Namen ansprechen:\"\n        >\n          <input\n            type=\"text\"\n            placeholder=\"Wie heißt du?\"\n            onChange={(e) => updateUserData(\"name\", e.target.value)}\n          />\n          <label>\n            Wir verwenden deinen Namen ausschließlich für die Personalisierung\n            deiner Mails.\n          </label>\n          {nextStepButton}\n        </FunnelStep>\n      )}\n      {funnelStep === 7 && (\n        <FunnelStep\n          title={`Cool ${userData.name}! Wir haben dir gerade eine Bestätigungsmail gesendet. Bitte bestätige den\n        Link um ab sofort den Lunchletter zu erhalten.`}\n        />\n      )}\n      {funnelStep === 99 && (\n        <FunnelStep title=\"Flott zu deinem Lunchletter: Dann benötigen wir nur noch deine Mailadresse:\">\n          <input type=\"text\"></input>\n        </FunnelStep>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Funnel from \"./pages/Funnel/Funnel\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Funnel />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}